1. JS is primarilly 'Pass by Value' but for Objects, Arrays, Functions it is 'Pass by Reference'.

2. JS is Interpreted language not Compiled language which means JS does not need extra compiler it runs line by line. (In compiled language if all the code get's successfully compiled first then it runs)
   Example of Interpreted - JS, python & Compiled - Java, C, C++, Golang, Rust.

3.  What are compilers - Compilers convert high level developer friendly code into 0s and 1s

4. Interpreted languages go line by line while executing, can partially run until an error comes.

5. in Js to loop for "Array" we say 'for(let i of arr){}'  & for "Objects" we say 'for(let i in obj)'

6. Es6 new features
   i.   let and const keyword
   ii.  Arrow Functions
   iii. Default Parameters // function myFunction(x, y = 10) {}; myFunction(5); // 15
   iv.  The Spread (...) Operator // const q1 = ["Jan", "Feb", "Mar"]; const year = [...q1];

   v. Maps // let map = new Map(); --> map.set('orange', 300) // console.log("map >> ", map.get('oranges')) // 300
      or let map = new Map([ ["apples", 500], ["oranges", 200] ]);
   
   vi.  Sets // let set = new Set(); --> set.add('a'); set.add('b); --> set.values() // {'a', 'b'}
        or let set = new Set(['a', 'b', 'c']);
   
   vii.  Class
   viii. Promise
   ix.   Rest Parameter // function sum(...args) {}; let x = sum(4, 9, 16, 25, 29, 100, 66, 77);
   x.    Template Literals // `${someValue}`

   xi.   Destructuring Assignment 
   ----> let fruits = ["Apple", "Banana"];
         let [a, b] = fruits; // Array destructuring assignment
         console.log(a, b); // Apple Banana

   ----> let person = {name: "Peter", age: 28};
         let {name, age} = person; // Object destructuring assignment
         console.log(name, age);  // Peter 28
